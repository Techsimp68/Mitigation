#Hide Console
Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();

[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);
'

function ShowConsole
{
    $consolePtr = [Console.Window]::GetConsoleWindow()
    [Console.Window]::ShowWindow($consolePtr, 5) #5 show
}

function HideConsole
{
    $consolePtr = [Console.Window]::GetConsoleWindow()
    [Console.Window]::ShowWindow($consolePtr, 0) #0 hide
}

HideConsole

#download needed imgs
New-Item -ItemType Directory "C:\temp\MitigationFiles" -Force
invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/XcelLogo.jpg' -OutFile "C:\temp\MitigationFiles\XcelLogo.jpg"
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/icon.ico' -OutFile "C:\temp\MitigationFiles\icon.ico"

#Loading Windows Forms to use WinForm Objects
Add-Type -assembly System.Windows.Forms


#Main form created
$main_form = New-Object System.Windows.Forms.Form

#Basic Elements
$main_form.Text ='H -> OneDrive Migration'
$main_form.Width = 620
$main_form.Height = 475
$main_form.AutoSize = $false
$main_form.StartPosition = 'CenterScreen'

#Icon & Background
$objIcon = New-Object system.drawing.icon ("c:\temp\MitigationFiles\icon.ico")
$main_form.Icon = $objIcon
$Image = [system.drawing.image]::FromFile("c:\temp\MitigationFiles\XcelLogo.jpg")
$main_form.BackgroundImage = $Image
$main_form.BackgroundImageLayout = "Stretch"
$main_form.FormBorderStyle = 'Fixed3D'
$main_form.MaximizeBox = $false

#Text  
$Label = New-Object System.Windows.Forms.Label
$Label.Text = "                             The following application will transfer 
                    folders/files from your H Drive to your OneDrive.
        The process will take 5-15 minutes to complete, please allow it 
                               complete before resuming work.


                                             Click Run to start."
$Label.Location = New-Object System.Drawing.Point(15,60)
$Label.Font = New-Object System.Drawing.Font("Verdana", 10, [System.Drawing.FontStyle]::Bold)
$Label.BackColor= [System.Drawing.Color]::Transparent
$Label.ForeColor= [System.Drawing.Color]::White
$Label.AutoSize = $true
$main_form.Controls.Add($Label)


#Button To Run Script
$Script = New-Object System.Windows.Forms.Button
$Script.Location = New-Object System.Drawing.Size(230,350)
$Script.Size = New-Object System.Drawing.Size(120,23)
$Script.Text = "Run"
$main_form.Controls.Add($Script)

Function disableClick 
{
    $Script.Enabled = $false
    Start-Sleep -Seconds 2
}

$Script.Add_Click( 

{
    #confimation user is ready
    $answer = [System.Windows.MessageBox]::Show( "Are you sure you want to continue? ", "Confirmation", "YesNo", "Warning" )
    
    if($answer -eq "No"){
        return
    }else{
       
        #Progress Bar
        $progressBar = New-Object System.Windows.Forms.ProgressBar
        $progressBar.Location = New-Object System.Drawing.Size(105,180)
        $progressBar.Size = New-Object System.Drawing.Size(375,25)
        $progressBar.Text = "Continue"
        $progressBar.ForeColor = "MediumBlue"
        $progressBar.DataBindings.DefaultDataSourceUpdateMode = 0
        $progressBar.Step = 1
        $timer = New-Object System.Windows.Forms.Timer
        $main_form.Controls.Add($progressBar)
        $timer.Interval = 100
        $timer.add_tick($timer_OnTick)
        $timer.start()
        $progressBar.Value = 0

        #StatusBar/New Page
        $Status = New-Object System.Windows.Forms.Label
        $Status.Text = "Initializing . . ."
        $Status.Location = New-Object System.Drawing.Point(105,210)
        $Status.Font = New-Object System.Drawing.Font("Verdana", 8, [System.Drawing.FontStyle]::Bold)
        $Status.BackColor= [System.Drawing.Color]::Transparent
        $Status.ForeColor= [System.Drawing.Color]::White
        $Status.AutoSize = $true
        $Label.text = " "
        $main_form.Controls.Add($status)

    
        disableClick
        #Creating Folders/Installing Needed Files
        New-Item -ItemType Directory "C:\temp" -Force
        New-Item -ItemType Directory "C:\temp\MitigationLogs" -Force
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/Microsoft.ActiveDirectory.Management%201.dll' -OutFile "C:\temp\MitigationFiles\Microsoft.ActiveDirectory.Management.dll"
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/Microsoft.ActiveDirectory.Management.resources%201.dll' -OutFile "C:\temp\MitigationFiles\Microsoft.ActiveDirectory.Management.resources.dll"
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/ActiveDirectoryPowerShellResources.dll' -OutFile "C:\temp\MitigationFiles\ActiveDirectoryPowerShellResources.dll"
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/ActiveDirectory.psd1' -OutFile "C:\temp\MitigationFiles\ActiveDirectory.psd1"
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/ActiveDirectory.Types.ps1xml' -OutFile "C:\temp\MitigationFiles\ActiveDirectory.Types.ps1xml"
        invoke-webRequest -Uri 'https://raw.githubusercontent.com/Techsimp68/Mitigation/main/ActiveDirectory.Format.ps1xml' -OutFile "C:\temp\MitigationFiles\ActiveDirectory.Format.ps1xml"
        $progressBar.Value = 5
        $Status.Text = "Retrieving User Data . . ."

        #Installing/Importing AD Module (Note: Import-Module will throw error if script is ran a 2nd time, safe to ignore)
        Start-Transcript -Path "C:\temp\MitigationLogs\TransferTranscript.txt"
        $FunctionFromGitHub = Invoke-WebRequest -uri "https://raw.githubusercontent.com/Techsimp68/Mitigation/main/annoyingFunction.ps1"
        Invoke-Expression $($FunctionFromGitHub.Content)
        Import-Module -Name "C:\temp\MitigationFiles\ActiveDirectory.psd1"

        #Function to get paths over 250 characters
        Function filesOverLength ($homeDirectory) {
            Get-ChildItem -LiteralPath $homeDirectory -Recurse | 
            Where-Object {$_.FullName.length -ge 250} 
        }      

        #Grab UserName
        [string]$domainUser = Get-WmiObject -class Win32_computersystem | Select -ExpandProperty username
        $user = $domainUser.split('\')[1]

        #Grab SID from Regedit
        $objUser = New-Object System.Security.Principal.NTAccount("$user")
        $strSID = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
        $strSID.Value

        #Grab H Drive from AD
        $homeDirectory = Get-ADUser -Identity $user -Properties * | Select-Object HomeDirectory
        $homeDirectory = "Microsoft.Powershell.Core/filesystem::$homeDirectory"
        $homeDirectory = ($homeDirectory.Split("="))[1]
        $homeDirectory = ($homeDirectory.Split("}"))[0]
        $progressBar.Value = 30
        $status.Text = "Transfering Data . . ."

        #Variable Parameter
        New-Item -ItemType Directory -Path "C:\Users\$user\OneDrive - Xcel Energy Services Inc\H Drive.$env:computername" -Force
        [array]$filesToSkip = filesOverLength -homeDirectory $homeDirectory

        # Copy Data Over , 
        Try {
            RoboCopy $homeDirectory "C:\Users\$user\OneDrive - Xcel Energy Services Inc\H Drive.$env:computername" /XD $filestoSkip /XD "OneNote NoteBooks" /XF $filesToSkip /Mir /XF "desktop.ini"
            $progressBar.Value = 85
            $Status.Text = "Checking Hash . . ."
        } Catch {
            $_.Exception.Message | Out-File -FilePath "C:\temp\MitigationLogs\errorLog.txt"  

        #Verification through Hash
        } finally {                
            Get-ChildItem -Path ('\\?\UNC\' + $homeDirectory.substring(2)) -Recurse -Exclude *.one, *.onetoc2, *.onepkg |
            Get-FileHash -Algorithm SHA256 | Select-Object -Property Hash | Out-File "C:\temp\MitigationLogs\HDriveHash.txt"
            Get-Childitem -Path "C:\Users\$user\OneDrive - Xcel Energy Services Inc\H Drive.$env:computername" -Recurse |
            Get-FileHash -Algorithm SHA256 | Select-Object -Property Hash | Out-File "C:\temp\MitigationLogs\OneDriveHash.txt"
            $transferVerification = (Get-Content -Path "C:\temp\MitigationLogs\OneDriveHash.txt")

            if($null -eq $transferVerification){
                [Void] [System.Windows.MessageBox]::Show("No Data has been moved over. A critical error has occured. Please contact the Help Desk.", "Script Failure","OK","Error")
                exit
            }else{
                $objects =@{
                    ReferenceObject = (Get-Content -Path "C:\temp\MitigationLogs\HDriveHash.txt")
                    DifferenceObject = (Get-Content -Path "C:\temp\MitigationLogs\OneDriveHash.txt")
                }

                $comparisonResult = Compare-Object @objects
      
                if ($null -eq $comparisonResult) {
                    Write-Output("Success the hashes are the Same!")
                    Stop-Transcript
                    $progressBar.Value = 100
                    $Status.Text = "Completed!"
 
                } else {
                    Write-Output("Failed the hashes dont match need human interaction!")
                    $Error > "C:\temp\MitigationLogs\HashErrors.txt"
                    Stop-Transcript
                    $progressBar.Value = 100
                    $Status.Text = "Completed!"
                }
            }
        }
        if($null -eq $filesToSkip){
            [void] [System.Windows.MessageBox]::Show("Transfer has been completed. Please verify all items have transfered to the following folder: 
            
C:\Users\$user\OneDrive - Xcel Energy Services Inc\H Drive.$env:computername .", "Move Complete", "OK", "Information")
            
        }else{
            [Void] [System.Windows.MessageBox]::Show("Transfer has been completed;however, the following files/folders have not been moved: 
$filesToSkip.
 
Please rename the folders/file names to a length shorter than 200 characters and launch the application again.", "Warning", "OK", "Warning")
            
        }
    }       
})      


$main_form.ShowDialog()| Out-Null
